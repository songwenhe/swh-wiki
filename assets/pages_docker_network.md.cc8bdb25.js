import{_ as s,c as a,o,Q as e}from"./chunks/framework.8adc4ca2.js";const D=JSON.parse('{"title":"docker网络","description":"","frontmatter":{"title":"docker网络","order":5},"headers":[],"relativePath":"pages/docker/network.md","lastUpdated":1683370865000}'),n={name:"pages/docker/network.md"},l=e(`<h2 id="docker-网络" tabindex="-1">docker 网络 <a class="header-anchor" href="#docker-网络" aria-label="Permalink to &quot;docker 网络&quot;">​</a></h2><h3 id="网络模式" tabindex="-1">网络模式 <a class="header-anchor" href="#网络模式" aria-label="Permalink to &quot;网络模式&quot;">​</a></h3><p><code>bridge</code>：为每个容器分配 IP 地址，并将容器连接到 docker0 的虚拟网桥，默认模式</p><p><code>host</code>：容器使用宿主机的 IP 地址和端口</p><p><code>none</code>：容器有独立的 network namespace，但没有对网络进行任何设置</p><p><code>container</code>：新创建的容器不会创建自己的网卡，而是和一个指定的容器共享 IP、端口等。</p><h3 id="基础命令" tabindex="-1">基础命令 <a class="header-anchor" href="#基础命令" aria-label="Permalink to &quot;基础命令&quot;">​</a></h3><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">network</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ls</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">#查看网络</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">network</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">inspect</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">网络名字</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">#查看网络源数据</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">network</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">rm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">网络名字</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">#删除网络</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">network</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">connect</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">网络名称</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">容器名称</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">#为容器连接新的网络模式</span></span></code></pre></div><h3 id="自定义网络" tabindex="-1">自定义网络 <a class="header-anchor" href="#自定义网络" aria-label="Permalink to &quot;自定义网络&quot;">​</a></h3><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">network</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">create</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">网络名字</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">#创建网络</span></span></code></pre></div><p>新建的自定义网络，自动做了 DNS 解析，默认使用桥接模式。可以让容器之间用服务名通讯。</p>`,11),t=[l];function p(c,r,C,i,d,y){return o(),a("div",null,t)}const h=s(n,[["render",p]]);export{D as __pageData,h as default};
